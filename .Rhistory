install.packages(shiny)
install.packages("shiny")
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
install("shinythemes")
install.packages("shinythemes")
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/New folder/first')
iris.csv
str(iris)
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
str(iris)
shiny::runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
TrainSet<-read.csv("training.csv" , header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet<-read.csv("training.csv" , header = TRUE)
TrainSet <- TrainSet[,-1]
str(TrainSet)
str(TrainSet)
TrainSet<-read.csv("training.csv" , header = TRUE)
write.csv(TrainingSet , "training.csv")
TrainigIndex <- createDataPartition(iris$Species , p = 0.8 , list = FALSE)
library(randomForest)
library(caret)
iris <- iris
TrainigIndex <- createDataPartition(iris$Species , p = 0.8 , list = FALSE)
library(caret)
install.packages(c("Amelia", "bit", "blob", "broom", "bslib", "cachem", "callr", "checkmate", "classInt", "cli", "colorspace", "commonmark", "covr", "crayon", "curl", "data.table", "DBI", "dbplyr", "deldir", "DEoptimR", "desc", "digest", "dslabs", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "fastmap", "forcats", "Formula", "fs", "gargle", "generics", "ggplot2", "ggrepel", "googledrive", "googlesheets4", "gtable", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "httr", "interp", "isoband", "jpeg", "jsonlite", "knitr", "Lahman", "later", "latticeExtra", "lessR", "lubridate", "mapproj", "maps", "maptools", "markdown", "MatrixModels", "mnormt", "modelr", "multcomp", "mvtnorm", "openssl", "openxlsx", "packrat", "pkgload", "plumber", "plyr", "png", "processx", "profvis", "proxy", "ps", "psych", "quantreg", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readODS", "readr", "readxl", "reprex", "rgeos", "rmarkdown", "robustbase", "rsconnect", "rstudioapi", "rvest", "s2", "sandwich", "sass", "scales", "sourcetools", "sp", "stringi", "stringr", "svglite", "sys", "testthat", "TH.data", "tidyr", "tidyverse", "tinytex", "triangle", "units", "utf8", "vdiffr", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
library(randomForest)
library(caret)
setwd("C:\Users\aman singh\OneDrive - DIT University\Desktop\Credit Card Approval")
setwd("C:\\Users\\aman singh\\OneDrive - DIT University\\Desktop\\Credit Card Approval")
library(readr)
library(tidyverse)
credit <- read_csv("crx.data")
credit <- read_csv("crx.data" , col_names = F , col_types =  cols(X1 = col_character() ,
X10 = col_logical(),
X12 = col_logical(),
X16 = col_character(),
X9 = col_logical(),
X11=col_integer()))
colnames(credits) = cols = c("Male", "Age", "Debt", "Married", "BankCustomer", "EducationLevel", "Ethnicity", "YearsEmployed", "PriorDefault", "Employed", "CreditScore", "DriversLicense", "Citizen", "ZipCode", "Income", "Approved")
credit = credit %>% mutate(Approved = Approved== "+") %>%
mutate(PriorDefault = !PriorDefault)
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/Credit Card Approval/Model.R", echo=TRUE)
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/Credit Card Approval/Model.R", echo=TRUE)
source("C:/Users/aman singh/OneDrive - DIT University/Desktop/Credit Card Approval/Model.R", echo=TRUE)
colnames(credits) = cols = c("Male", "Age", "Debt", "Married", "BankCustomer", "EducationLevel", "Ethnicity", "YearsEmployed", "PriorDefault", "Employed", "credits", "DriversLicense", "Citizen", "ZipCode", "Income", "Approved")
colnames(credit) = cols = c("Male", "Age", "Debt", "Married", "BankCustomer", "EducationLevel", "Ethnicity", "YearsEmployed", "PriorDefault", "Employed", "CreditScore", "DriversLicense", "Citizen", "ZipCode", "Income", "Approved")
credit = credit %>% mutate(Approved = Approved== "+") %>%
mutate(PriorDefault = !PriorDefault)
str(credit)
show(credit)
## --->   Due to males generally having a higher income, we can find out by checking which has the higher income.
library(ggplot2)
incomeBar = ggplot(credit , aes(Male , Income , fill = Male)) + geom_col()
incomBar
incomeBar
credit = credit %>% mutate(Male= Male = "b")
credit = credit %>% mutate(Male= Male == "b")
str(credit)
li = log10(credit$Income + 0.01)
boxplot(li ~ credit$Approved)
ggplot(credit, aes(factor(PriorDefault, labels = c("No prior default", "Prior default")), fill = Approved)) +
geom_bar() +
scale_fill_brewer(palette = "RdYlGn") +
ggtitle("Prior Default - Approved Percentage") +
xlab("Prior Default")
ggplot(credit, aes(factor(PriorDefault, labels = c("No prior default", "Prior default")), fill = Approved)) +
geom_bar() +
ggtitle("Prior Default - Approved Percentage") +
xlab("Prior Default")
ggplot(credit, aes(factor(PriorDefault, labels = c("No prior default", "Prior default")), fill = Approved)) +
geom_bar() +
ggtitle("Prior Default - Approved Percentage") +
xlab("Prior Default")
dev.off()
ggplot(credit, aes(factor(PriorDefault, labels = c("No prior default", "Prior default")), fill = Approved)) +
geom_bar() +
ggtitle("Prior Default - Approved Percentage") +
xlab("Prior Default")
ggplot(credit, aes(factor(Employed, labels = c("Not employed", "Employed")), fill = Approved)) +
geom_bar() +
ggtitle("Employed - Approved Percentage") +
xlab("Employed")
ggplot(credit, aes(Ethnicity, fill = Approved)) +
geom_bar()
ggplot(credit, aes(Male, fill = Approved)) +
geom_bar()
ggplot(credit, aes(EducationLevel, fill = Approved)) +
geom_bar()
ggplot(credit, aes(factor(Approved, labels = c("Denied", "Approved")), YearsEmployed)) +
geom_boxplot() +
ggtitle("Years Employed - Approved") +
xlab("Approved") +
ylab("Years Employed")
install.packages("FFTrees")
library(FFTrees)
ffTreeCredit = credit %>%
select(c("Male", "Debt", "Married", "BankCustomer", "EducationLevel", "Ethnicity", "YearsEmployed", "PriorDefault", "Employed", "CreditScore", "DriversLicense", "Citizen", "Income", "Approved"))
set.seed(199)
rows = sample(nrow(ffTreeCredit))
split = round(nrow(ffTreeCredit) * 0.7)
creditTraining = ffTreeCredit[1:split, ]
creditTest = ffTreeCredit[(split + 1):nrow(ffTreeCredit), ]
ffTree = FFTrees(formula = Approved ~ .,
data = creditTraining,
data.test = creditTest,
main = "Credit Card Approval",
decision.labels = c("Denied", "Approved"))
plot(ffTree, data = "test")
library(randomForest)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 800 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
# Calculate RMSE
rmse <- sqrt(mean((predictions$actual - predictions$predicted)^2))
# Calculate RMSE
rmse <- sqrt(mean((Prediction$actual - Prediction$predicted)^2))
# Calculate RMSE
rmse <- sqrt(mean((Prediction - creditTest$Approved)^2))
# Calculate RMSE
rmse <- sqrt(mean((Prediction == creditTest$Approved)^2))
# Print RMSE
print(rmse)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 500 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
# Calculate RMSE
rmse <- sqrt(mean((Prediction == creditTest$Approved)^2))
# Print RMSE
print(rmse)
install.packages("caret")
install.packages("caret")
library(caret)
?confusionMatrix()
confusion_m = table(Prediction , creditTest$Approved)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 600 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
confusion_m = table(Prediction , creditTest$Approved)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 400 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
confusion_m = table(Prediction , creditTest$Approved)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 500 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
confusion_m = table(Prediction , creditTest$Approved)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
print(confusion_m)
confusion_m = confusionMatrix(Prediction , creditTest$Approved)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 100 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
confusion_m = confusionMatrix(Prediction , creditTest$Approved)
confusion_m = table(Prediction , creditTest$Approved)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
print(confusion_m)
str(creditTest$Approved)
test_col = factor(creditTest$Approved)
confusion_m = table(Prediction , test_col)
confusion_m = confusionMatrix(Prediction , test_col)
print(confusion_m)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 500 , mtry = 5 , importance = T)
Prediction = predict(model , creditTest)
str(Prediction)
str(creditTest$Approved)
test_col = factor(creditTest$Approved)
confusion_m = confusionMatrix(Prediction , test_col)
accuracy <- sum(diag(confusion_m)) / sum(confusion_m)
print(accuracy)
print(confusion_m)
model <- randomForest(as.factor(Approved) ~ . , data = creditTraining , nTree = 500 , mtry = 5 , importance = T)
saveRDS(model , "model.rds")
Prediction = predict(model , creditTest)
str(Prediction)
# Calculate RMSE
rmse <- sqrt(mean((Prediction == creditTest$Approved)^2))
# Print RMSE
print(rmse)
library(caret)
str(creditTest$Approved)
test_col = factor(creditTest$Approved)
confusion_m = confusionMatrix(Prediction , test_col)
print(accuracy)
print(confusion_m)
shiny::runApp('app')
runApp('app')
library(shinythemes)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
View(creditTest)
str(creditTest)
head(creditTest)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(creditTraining)
runApp()
runApp()
colnames(data)
colnames(creditTest)
coltype(creditTest)
coltypes(creditTest)
col(creditTest)
runApp()
runApp()
column_types <- sapply(creditTest, class)
# Print the column types
print(column_types)
runApp()
runApp()
runApp('C:/Users/aman singh/OneDrive - DIT University/Desktop/R_Model/Iris_predicter')
runApp()
str(Prediction)
runApp()
